"use strict";function _interopDefault(a){return a&&"object"==typeof a&&"default"in a?a["default"]:a}var assert=require("assert"),params=_interopDefault(require("./main"));const qobj={a:1,b:2,c:3},qstr="a=1&b=2&c=3";global.FormData=class{constructor(){this.data={}}append(a,b){this.data[a]=b}},describe("@jsweb/params",()=>{it("import should return a function",()=>{assert.equal(params instanceof Function,!0)}),it("instance should return an object",()=>{const a=params(qstr);assert.equal("object"==typeof a,!0)}),it("instance should accept an argument to store as value property",()=>{const a=params(qstr);assert.equal(a.value,qstr)}),describe("params(obj).serialize()",()=>{it("should join an object into a query string",()=>{const a=params(qobj).serialize();assert.equal(a,qstr)})}),describe("params(qstr).parse()",()=>{it("should split a query string to object",()=>{const a=params(qstr).parse();assert.deepEqual(a,qobj)})}),describe("params(data).form()",()=>{it("should transform params string or object into FormData",()=>{const a=params(qstr).form(),b=params(qobj).form();assert.equal(a instanceof FormData,!0),assert.equal(b instanceof FormData,!0),assert.deepEqual(a.data,qobj),assert.deepEqual(b.data,qobj)})})});